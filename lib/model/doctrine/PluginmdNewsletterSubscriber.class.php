<?php

/**
 * PluginmdNewsletterSubscriber
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmdNewsletterSubscriber extends BasemdNewsletterSubscriber {


  public static function suscribe($email, $groups = null){
    //newsletter. Inscribo a todos al grupo usuarios y a los subscritos al grupo susctrito
    $subscriber = mdNewsletterSubscriberTable::getInstance()->findOneByEmail($email);

    if(!$subscriber){
      $subscriber = new mdNewsletterSubscriber();
      $subscriber->setEmail($email);
      $subscriber->save();
    }
    if($groups != null){
      if(!is_array($groups)){
        $groups = array($groups);
      }
      foreach($groups as $group){
        if(is_string($group))
          $mdGroup = mdNewsletterGroupTable::getInstance()->findOneByName($group);
        else
          $mdGroup = mdNewsletterGroupTable::getInstance()->find($group);
        
        if(!$mdGroup->hasSubscriber($subscriber)){
          $relation = new mdNewsletterGroupSubscriber();
          $relation->setMdGroupId($mdGroup->getId());
          $relation->setMdSubscriberId($subscriber->getId());
          $relation->save();
        }
      }
    }
    return $subscriber;
  }


  public function removeFromGroup($group){
    
    if(gettype($group) == 'object' && get_class($group) == 'mdNewsletterGroup')
      $mdGroup = $group;
    elseif(is_string($group))
      $mdGroup = mdNewsletterGroupTable::getInstance()->findOneByName($group);
    else
      $mdGroup = mdNewsletterGroupTable::getInstance()->find($group);

    return $mdGroup->removeSubscriber($this);

  }

  public static function export($ids = null) {
    return Doctrine::getTable('mdNewsletterSubscriber')->findSubscribers($ids);
  }

  public static function import($file, $ids = null) {
    $data = new Spreadsheet_Excel_Reader();
    $data->setOutputEncoding('CP1251'); // Set output Encoding.
    $data->read($file);

    $emails = array();

    for ($i = 1; $i <= $data->rowcount(0); $i++) 
    {
      $email = trim($data->sheets[0]['cells'][$i][1]);

      if($email != "" && mdBasicFunction::validEmail($email)) $emails[] = $email;
    }
    
    Doctrine::getTable('mdNewsletterSubscriber')->batch_create($emails);
  }
  
  public function unsuscribe(){
    $this->setStatus('unsubscribed');
    $this->save();
  }
  
  public static function getUnsuscribeUrl($id){
    sfContext::getInstance()->switchTo('frontend');
    sfContext::getInstance()->getConfiguration()->loadHelpers("Url");
    $url = str_replace(sfConfig::get('app_observer_taskSymfonyUrl'), sfConfig::get('app_observer_taskFrontendUrl') , url_for('@mdNewsletterUnsuscribe?code=' . self::getSubscriberParams($id), true));
    sfContext::getInstance()->switchTo('backend');
    return $url;
  }
  
  public static function getSubscriberParams($id){
    $time = time();
    $security_key = mdBasicFunction::generateKey(10);
    $key = mdBasicFunction::encrypt($security_key . $id . $time);

    // key | security_key | id | timestamp
    $params = base64_encode($key . '|' . $security_key . '|' . $id . '|' . $time);
    
    return $params;
  }
  
  /**
   * Valida los parametros de y nos devuelve
   * el registro mdNewsletterSubscriber correspondiente
   * 
   * @param string $code
   * @return mdNewsletterSubscriber 
   */
  public static function checkUnsuscribeParams($code){
    $params = base64_decode($code);
    $info = explode('|', $params);

    // key | security_key | id | timestamp
    list($key, $security_key, $id, $timestamp) = $info;

    // Validamos la key
    if($key != mdBasicFunction::encrypt($security_key . $id . $timestamp))
    {
      throw new Exception('Verification fail');
    }
    
    // Validamos registro
    $register = Doctrine::getTable('mdNewsletterSubscriber')->find($id);
    if($register)
    {
      $register->unsuscribe();
    }
    else
    {
      throw new Exception('user not exist');
    }

    return $register;
  }  

}